{
  "data": [
    {
      "BuildPath": "/opt/build/build/tmp/work/core2-64-scatest-linux/simple-c/1.0-r0/sources",
      "Column": "2",
      "File": "simple-hello-world.c",
      "ID": "clang-analyzer-security.insecureAPI.strcpy",
      "Line": "7",
      "Message": "Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 ",
      "PackageName": "simple-c",
      "Scope": "functional",
      "Severity": "warning",
      "Tool": "clang",
      "details": "<div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%;\"><span></span><span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">5</span><span style=\"color: #008000; font-weight: bold\">static</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #B00040\">char</span><span style=\"color: #666666\">*</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #0000FF\">foo</span>(<span style=\"color: #B00040\">char</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">*</span>input)<span style=\"color: #bbbbbb\"> </span>{<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">6</span><span style=\"color: #bbbbbb\">\t</span>strcpy(a,<span style=\"color: #bbbbbb\"> </span>input);<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">7</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span>a;<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">8</span>}<span style=\"color: #bbbbbb\"></span>\n</pre></div>\n"
    },
    {
      "BuildPath": "/opt/build/build/tmp/work/core2-64-scatest-linux/simple-c/1.0-r0/sources",
      "Column": "2",
      "File": "simple-hello-world.c",
      "ID": "clang-diagnostic-fortify-source",
      "Line": "17",
      "Message": "'memcpy' will always overflow; destination buffer has size 80, but size argument is 90 ",
      "PackageName": "simple-c",
      "Scope": "functional",
      "Severity": "warning",
      "Tool": "clang",
      "details": "<div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%;\"><span></span><span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">15</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #B00040\">char</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">*</span>b[<span style=\"color: #666666\">10</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">=</span><span style=\"color: #bbbbbb\"> </span>{};<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">16</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #B00040\">char</span><span style=\"color: #bbbbbb\"> </span>c[<span style=\"color: #666666\">250</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">=</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #BA2121\">&quot;&quot;</span>;<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">17</span><span style=\"color: #bbbbbb\">\t</span>memcpy(<span style=\"color: #666666\">&amp;</span>a,<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">&amp;</span>a,<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">sizeof</span>(a)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">+</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">10</span>);<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">18</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memcpy(&amp;b, &amp;a, sizeof(a));</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">19</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memset(&amp;c, &#39;a&#39;, 255);</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">20</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #bbbbbb\"> </span>(c[<span style=\"color: #666666\">-1</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">==</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">0</span>)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">1</span>;<span style=\"color: #bbbbbb\"></span>\n</pre></div>\n"
    },
    {
      "BuildPath": "/opt/build/build/tmp/work/core2-64-scatest-linux/simple-c/1.0-r0/sources",
      "Column": "2",
      "File": "simple-hello-world.c",
      "ID": "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling",
      "Line": "17",
      "Message": "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 ",
      "PackageName": "simple-c",
      "Scope": "functional",
      "Severity": "warning",
      "Tool": "clang",
      "details": "<div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%;\"><span></span><span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">15</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #B00040\">char</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">*</span>b[<span style=\"color: #666666\">10</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">=</span><span style=\"color: #bbbbbb\"> </span>{};<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">16</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #B00040\">char</span><span style=\"color: #bbbbbb\"> </span>c[<span style=\"color: #666666\">250</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">=</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #BA2121\">&quot;&quot;</span>;<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">17</span><span style=\"color: #bbbbbb\">\t</span>memcpy(<span style=\"color: #666666\">&amp;</span>a,<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">&amp;</span>a,<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">sizeof</span>(a)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">+</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">10</span>);<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">18</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memcpy(&amp;b, &amp;a, sizeof(a));</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">19</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memset(&amp;c, &#39;a&#39;, 255);</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">20</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #bbbbbb\"> </span>(c[<span style=\"color: #666666\">-1</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">==</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">0</span>)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">1</span>;<span style=\"color: #bbbbbb\"></span>\n</pre></div>\n"
    },
    {
      "BuildPath": "/opt/build/build/tmp/work/core2-64-scatest-linux/simple-c/1.0-r0/sources",
      "Column": "6",
      "File": "simple-hello-world.c",
      "ID": "clang-diagnostic-array-bounds",
      "Line": "20",
      "Message": "array index -1 is before the beginning of the array ",
      "PackageName": "simple-c",
      "Scope": "functional",
      "Severity": "warning",
      "Tool": "clang",
      "details": "<div class=\"highlight\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%;\"><span></span><span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">18</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memcpy(&amp;b, &amp;a, sizeof(a));</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">19</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #408080; font-style: italic\">//memset(&amp;c, &#39;a&#39;, 255);</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">20</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #bbbbbb\"> </span>(c[<span style=\"color: #666666\">-1</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">==</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">0</span>)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">1</span>;<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">21</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">0</span>;<span style=\"color: #bbbbbb\"></span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">22</span>\n<span style=\"color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;\">23</span><span style=\"color: #bbbbbb\">\t</span><span style=\"color: #008000; font-weight: bold\">if</span><span style=\"color: #bbbbbb\"> </span>(c[<span style=\"color: #666666\">-1</span>]<span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">==</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">0</span>)<span style=\"color: #bbbbbb\"> </span><span style=\"color: #008000; font-weight: bold\">return</span><span style=\"color: #bbbbbb\"> </span><span style=\"color: #666666\">1</span>;<span style=\"color: #bbbbbb\"></span>\n</pre></div>\n"
    }
  ]
}